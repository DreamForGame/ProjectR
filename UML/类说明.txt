一：UI模块

拥有的类和相关资源:

主要：
	UIManager.cs
	UIJson.cs
	GetUIJson.cs
	UIType.cs
	UIPlane.cs

设置:
	UIConfig.cs

扩展:
	DictionaryExtension.cs

资源:
	UIJson.json

说明：

UIManager是一个单例类，主要职责是控制所有UI窗口的创建与关闭(UIPlane)。
UIManager拥有两个字典：一个是窗口的对象池，一个是Json里面所填写窗口的路径
当窗口创建好后，Json字典的路径会自动清空。当窗口关闭后，窗口不会Destory
而是会隐藏，以便下次调用。

UIConfig的主要设置UI的一些相关设置，UIManager会调用它，用它部分成员进行操作。

UIPlane则是所有窗口的父类，其中包含四个可改写的虚函数:
	OnEnable(),Begin(),Pause(),OnDisable()

用户可以根据需要对其进行改写。

目前用户可以改写的文件有：
	UIJson.json(存储在Resources中)
	DictionaryExtension:目前除TryGet函数外可以进行额外增加，但TryGet为必要函数，不能删减，会在UIManager中进行调用
	UIType:用户可以根据需求进行改写，此为对象池索引


----------------------------------------------------------------------------------------------------------------------------------------------


二：场景管理


拥有的类:

主要：
	ScenenStateController.cs
	ScenenState.cs
	ScenenRoot.cs



说明：

ScenenStateController主要职责是对其私有成员进行场景状态的切换，初始化，主要逻辑，退出和跳转场景等操作。
该私有成员不会被外界获取。

每一个场景的主要逻辑可以继承ScenenState进行改写。

而ScenenRoot会在初始化的时候对ScenenStateController进行初始化，并设置成不会因场景跳转而被删除（日后可能会修改这个逻辑）



----------------------------------------------------------------------------------------------------------------------------------------------


三：音频管理
拥有的类：
	AudioBase.cs
	AudioFSMState.cs
	AudioPlane.cs
	AudioSetting.cs
	AudioSystem.cs
	RepeatePlayAudio.cs
	SinglePlayAudio.cs
	AudioShadeBig.cs
	AudioShadeSmall.cs
	SoundEffect.cs
	SoundEffectManager.cs

说明：
AudioSystem类是一个单例类，它可以通过SendMsg对AudioBase里面的音频机进行设置，相关状态设置可以看AudioSetting里面的AudioState。
SinglePlayAudio主要功能是存放每关不同的声音，而RepeatePlayAudio.cs则是存放公共声音，两者继承自AudioBase.cs
AudioShadeSmall和AudioShadeBig是音效效果，目前只实现了逐渐放大和逐渐减小声音，两者继承自SoundEffect,相关音效类型可以查看AudioSetting里面
的AudioEffect

使用：
以关卡为例子：每个关卡需要至少一个音频预制体作为音频对象池，然后手动对AudioSystem里面的SinglePlayAudio对象进行初始化(目前只能手动，建议在loading
进行)，初始化后会在场景创建一个了对象池对象。
SendMsg一共拥有四个参数，第一个参数use是用来判断是使用重复的语音还是关卡专属语音，第二个参数则是语音名称，通过该名称传入到SinglePlayAudio或
RepeatePlayAudio中来判断自身对象池是否存在该AudioSource对象，如果拥有该对象则调用该对象，如果没有则重新创建一个对象并保存到对象池中。
第三个参数是状态，它会根据该参数而对AudioFSMState的相关操作函数进行委托，然后执行。
第四个参数则是音效，目前只有正常，逐渐放大和逐渐减少，参数默认是正常音效，该参数主要用于判断实现音效结束或刚开始播放时的效果。当在正常模式时，
声音对象会在播放完后进行销毁。

